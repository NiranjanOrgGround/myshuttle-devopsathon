name: Java CI

on:
    push:
        branches: ['s']
    pull_request:
        branches: ['s']
    workflow_dispatch:
 

jobs:
    Build:
        runs-on: ubuntu-latest
        outputs:
            set_date: ${{ steps.set_date.outputs.DATE }}
        steps:
            - name: Date variable
              id: set_date
              run: |
                  echo "DATE=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
                  
            - uses: actions/checkout@v3
            
            - name: Setup Java JDK 11
              uses: actions/setup-java@v3.12.0
              with:
                java-version: '11'
                distribution: temurin
                cache: maven

            - name: Build with Maven
              run: |
                  mvn package 

            - name: upload Build Artifacts
              uses: actions/upload-artifact@v3.1.2
              with:
                name: "myArtifact_${{ steps.set_date.outputs.DATE }}"
                path: |
                    ./target/*.war
                    *.sql

    terraform:
        name: 'Terraform'
        needs: 'Build'
        # if: github.event_name == 'push' && contains(github.event.paths, './terraform/')
        runs-on: ubuntu-latest
        outputs:
            AZURE_CREDENTIAL: ${{ steps.AZURE_CREDENTIAL.outputs.AZ_CRED }}
            PUBLISH_PROFILE: ${{ steps.AZURE_WEBAPP_PUBLISH_PROFILE.outputs.AZ_PUBLISH_PROFILE }} 
    
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        # Set the working directory to main for the config files
        defaults:
          run:
            shell: bash
            working-directory: ./terraform

        permissions:
            pull-requests: write
    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4.1.1
    
        # Install the preferred version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          id: init
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          run: terraform init

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
    
        # Run a terraform plan for pull requests only
        - name: Terraform Plan
          id: plan
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color
          continue-on-error: true
    
        # On push to main, build or change infrastructure according to Terraform configuration files
        - name: Terraform Apply
          if: github.ref == 'refs/heads/s' && github.event_name == 'push'
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          run: terraform apply -auto-approve

        # login to azure cli
        - name: Azure login
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.ARM_CLIENT_ID }}
            tenant-id: ${{ secrets.ARM_TENANT_ID }}
            subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            enable-AzPSSession: true
  
        - name: Azure CLI script
          uses: azure/CLI@v1
          id: AZURE_CREDENTIAL
          with:
            azcliversion: latest
            inlineScript: |
              echo "AZ_CRED=$(az ad sp create-for-rbac --name myshuttle-mysqlserver --role contributor --scopes /subscriptions/b2bb726b-8781-4706-b78e-953ca038b27b/resourceGroups/myshuttle-rg --sdk-auth)" >> $GITHUB_OUTPUT

        - name: Azure CLI script
          uses: azure/CLI@v1
          id: AZURE_WEBAPP_PUBLISH_PROFILE
          with:
            azcliversion: latest
            inlineScript: |
              echo "AZ_PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g 'myshuttle-rg' -n 'myshuttle-webapp' --xml)" >> $GITHUB_OUTPUT
    
    deployToProd:
      name: ðŸš€ Deploy to Prod
      runs-on: ubuntu-latest 
      environment: 
       name: deploy
       url: https://myshuttle-webapp-demo.azurewebsites.net/myshuttledev
      needs: ['terraform']

      steps:
        - name: Download artifact from build job
          uses: actions/download-artifact@v3
          with:
            name: "myArtifact_${{ needs.Build.outputs.set_date }}"

        - name: Azure WebApp
          uses: Azure/webapps-deploy@v3
          with:
            app-name: myshuttle-webapp-demo
            package: ./target/
            publish-profile: ${{ needs.terraform.outputs.PUBLISH_PROFILE }}

        # - uses: azure/login@v1
        #   with:
        #     creds: ${{ needs.terraform.outputs.AZURE_CREDENTIAL }}
            
        - uses: azure/mysql@v1
          with:
            server-name: myshuttle-mysqlserver.mysql.database.azure.com
            username: myshuttle@myshuttle-mysqlserver
            password: P@ssw0rd@123
            # This is optional, you want to connect directly
            database: alm
            sql-file: './CreateMYSQLDB.sql'
