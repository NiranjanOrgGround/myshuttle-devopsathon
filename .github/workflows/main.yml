name: Java CI

on:
    push:
        branches: ['s']
    pull_request:
        branches: ['s']
    workflow_dispatch:
 

jobs:
    Build:
        runs-on: ubuntu-latest
        outputs:
            set_date: ${{ steps.set_date.outputs.DATE }}
        steps:
            - name: Date variable
              id: set_date
              run: |
                  echo "DATE=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
                  
            - uses: actions/checkout@v3
            
            - name: Setup Java JDK 11
              uses: actions/setup-java@v3.12.0
              with:
                java-version: '11'
                distribution: temurin
                cache: maven

            - name: Build with Maven
              run: |
                  mvn package 

            - name: upload Build Artifacts
              uses: actions/upload-artifact@v3.1.2
              with:
                name: "myArtifact_${{ steps.set_date.outputs.DATE }}"
                path: |
                    ./target/*.war
                    *.sql

    terraform:
        name: 'Terraform'
        needs: 'Build'
        runs-on: ubuntu-latest
    
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        # Set the working directory to main for the config files
        defaults:
          run:
            shell: bash
            working-directory: ./terraform

        permissions:
            pull-requests: write
    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4.1.1
    
        # Install the preferred version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          id: init
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          run: terraform init

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
    
        # Run a terraform plan for pull requests only
        - name: Terraform Plan
          id: plan
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color
          continue-on-error: true
        
        # Add a comment to pull requests with plan results
        - name: add-plan-comment
          id: comment
          uses: actions/github-script@v3
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
            tf_actions_working_dir: "${{ github.repository }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
           
              <details><summary>Show Plan</summary>
              
              \`\`\`${process.env.PLAN}\`\`\`
              
              </details>
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
                
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
    
          # On push to main, build or change infrastructure according to Terraform configuration files
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          run: terraform apply -auto-approve
